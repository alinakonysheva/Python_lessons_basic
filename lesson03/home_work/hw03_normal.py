# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

def fibonacci(n, m):

    i = 2
    list1 = [1, 1]
    while i < m:
        a = list1[i - 1] + list1[i - 2]
        list1.append(a)

        i = i + 1

    return list1[n-1: m]


print(fibonacci(3, 5))
print(fibonacci(4, 8))

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()


def sort_to_max(origin_list):
    """

    :param origin_list: список, который необходимо отсортировать
    :return: отсортированный список по возрастанию
    """
    b = origin_list
    c = True

    while c:
        c = False
        i = 0
        while i < len(b) - 1:
            h = b[i]
            l = b[i + 1]
            if h > l:
                b[i] = l
                b[i + 1] = h
                c = True
            i = i + 1

    return b


print(sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0]))


# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.


a = [3, 5, 7, 8]


def funct(x):
    """

    :param x: проверяемый список
    :return: числа не равные 7
    """
    return x != 7


def filter1(funct, a):
    """

    :param funct: функция, которая дает false или true
    :param a: список, который надо отфильтровать
    :return: преобразованный первончальный список, в котором удалены элементы, согласно фильтрующей функции
    """

    for i in a:
        if funct(i) == False:
            a.remove(i)

    return a


print(filter1(funct, a))


# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

def whether_parallelogram(a, b, c, d):
    """

    :param a: список, в которой указываем 1-ую вершину гипотетического параллелограмма
    :param b: список, в которой указываем 2-ую вершину гипотетического параллелограмма
    :param c: список, в которой указываем 3-ую вершину гипотетического параллелограмма
    :param d: список, в которой указываем 4-ую вершину гипотетического параллелограмма
    :return: заключение строится ли по этим точкам параллелограмм
    """

    if abs(int(a[0]) - int(b[0])) == abs(int(c[0]) - int(d[0])) and abs(int(a[1]) - int(b[1])) == abs(int(c[1]) - int(d[1])):

        print("this is a parallelogram!")

    else:
        print("this is not a parallelogram!")