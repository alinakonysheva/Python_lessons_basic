# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
          
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]

print("matrix_rotate =", list(map(list, zip(*matrix))))


# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

# решение задачи при котором ферзи не бьют друг друга, нужно вывести NO
good_solution = [[1, 4], [2, 6], [3, 8], [5, 7], [6, 1], [7, 3], [8, 5], [4, 2]]

# решение задачи, при котором ферзи бьют друг друга, нужно вывести YES
bad_solution = [[1, 4], [2, 4], [3, 4], [5, 6], [8, 1], [7, 5], [4, 8], [5, 8]]


def check_solutions(solution):
    """

    :param solution: положение 8-ми ферзей на шахматной доске, формате [x, y]
    :return: печать yes, если ферзи бьют друг друга или no, если не бьют
    """

    for i in range(0, 6):
        for j in range(i + 1, 7):
            a = solution[i]
            b = solution[j]
            # проверяем не бьют ли ферзи друг друга по x
            if a[0] == b[0]:
                print('Yes')
                return
            # проверяем не бьют ли ферзи друг друга по y
            elif a[1] == b[1]:
                print('Yes')
                return
            # проверяем не бьют ли ферзи друг друга по диагонали
            elif abs(a[0] - a[1]) == abs(b[0] - b[1]):
                print('Yes')
                return
            else:
                print('No')
                return


check_solutions(good_solution)
check_solutions(bad_solution)